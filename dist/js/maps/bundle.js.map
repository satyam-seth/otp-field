{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bundle.js","src/ts/components/field.ts","src/ts/main.ts","src/ts/utils/regex.ts","src/ts/utils/types.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","value","types_1","regex_1","OTPField","config","instance","TypeError","_classCallCheck","this","fieldValue","boxCount","field","document","createElement","id","className","appendChild","getBoxElement","index","box","getBoxId","type","maxLength","autocomplete","setAttribute","toString","addEventListener","onBoxInput","bind","onBoxKeyDown","onBoxFocus","onBoxPaste","focusBoxIndex","getBoxValue","focusBox","setBoxValue","element","remove","parentElement","skeleton","_a","customRegex","getOTPRegexForValueType","valueType","OTPValueType","NUMERIC","replace","getOtpRegex","namespace","boxId","getElementById","dataIndex","getAttribute","parseInt","concatenatedValue","getBoxAtIndex","focus","currentBox","currentBoxIndex","getBoxIndex","preventDefault","pastedText","clipboardData","getData","pastedValue","applyRegex","Math","min","onPasteBlur","undefined","blur","updateValue","selectionStart","selectionEnd","focusPrevBox","focusNextBox","updatedValue","get","elem","default","__importDefault","mod","__esModule","field_1","window","onload","build","body","ALPHABETIC","ALPHABETIC_LOWER","ALPHABETIC_UPPER","ALPHANUMERIC","ALPHANUMERIC_LOWER","ALPHANUMERIC_UPPER"],"mappings":"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","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"import { OTPFieldConfig } from './types';\nimport { OTPValueType } from '../utils/types';\nimport { getOTPRegexForValueType } from '../utils/regex';\n\n/**\n * A class representing an OTP (One-Time Password) input field, designed to handle\n * multiple input boxes for entering a series of characters, typically used for\n * verification processes such as two-factor authentication.\n *\n * This class provides functionalities for:\n * - Configuring the OTP input field with specific settings.\n * - Managing the state of individual input boxes.\n * - Validating and formatting input values.\n * - Handling user interactions such as input, paste, and keyboard events.\n * - Focusing on the appropriate input boxes based on user actions.\n *\n * Usage Example:\n * ```typescript\n * const otpFieldConfig: OTPFieldConfig = {\n *   boxCount: 6,           // Number of input boxes\n *   namespace: 'otp',      // Namespace for IDs\n * };\n *\n * const otpField = new OTPField(otpFieldConfig);\n * otpField.build(document.getElementById('otp-container'));\n * ```\n */\nexport default class OTPField {\n  // Configuration for the OTP field\n  config: OTPFieldConfig;\n\n  // Current value of the OTP input fields\n  private fieldValue = '';\n\n  /**\n   * Initializes the OTP input handler with the specified configuration.\n   *\n   * @param {OTPFieldConfig} config - The configuration object for the OTP field.\n   * @throws {Error} If the `boxCount` in the config is less than or equal to zero.\n   *\n   * @remarks\n   * This constructor sets up the OTP input field configuration. It ensures\n   * that the `boxCount` (number of input boxes) is a valid positive integer.\n   * If the `boxCount` is not greater than zero, it throws an error.\n   */\n  constructor(config: OTPFieldConfig) {\n    if (config.boxCount <= 0) {\n      throw new Error('Invalid config box count must be grater than zero.');\n    }\n\n    this.config = config;\n  }\n\n  /**\n   * Creates the HTML structure (skeleton) for the OTP input field.\n   *\n   * @private\n   * @returns {HTMLElement} - The parent `div` element containing the OTP input boxes.\n   *\n   * @remarks\n   * This method generates a `div` element with the specified number of OTP input boxes\n   * (as defined in the configuration). Each box is created by calling `this.getBox(i)`\n   * and is appended to the parent `div`. The `div` is given an `id` and a CSS class\n   * of 'otp-field' to allow for easy styling and manipulation.\n   */\n  private skeleton(): HTMLElement {\n    const field = document.createElement('div');\n    field.id = this.id;\n    field.className = 'otp-field';\n\n    // Create and append the OTP input boxes\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      field.appendChild(this.getBoxElement(i));\n    }\n\n    return field;\n  }\n\n  /**\n   * Creates and returns an OTP input box element.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box.\n   * @returns {HTMLInputElement} - The generated OTP input box element.\n   *\n   * @remarks\n   * This method creates a single OTP input box (HTML `input` element) and sets its properties:\n   * - `id`: A unique ID for the input box, generated by `getBoxId(index)`.\n   * - `type`: Set to `'text'` to allow text input.\n   * - `maxLength`: Restricts the input to a single character.\n   * - `autocomplete`: Disabled to prevent suggestions from the browser.\n   * - `data-index`: A custom attribute to store the index of the box for easy reference.\n   *\n   * It also attaches event listeners for handling user interaction:\n   * - `input`: To handle when the user types in the box.\n   * - `keydown`: To manage key-based interactions (e.g., arrow keys, backspace).\n   * - `focus`: To handle behavior when the input box gains focus.\n   * - `paste`: To manage paste events (e.g., pasting OTP from clipboard).\n   */\n  private getBoxElement(index: number) {\n    const box = document.createElement('input');\n\n    box.id = this.getBoxId(index); // Assign unique ID and basic attributes\n    box.type = 'text'; // Text input field\n    box.maxLength = 1; // Restrict to 1 character\n    box.autocomplete = 'off'; // Disable browser autocomplete\n    box.setAttribute('data-index', index.toString()); // Store index as `data-index`\n\n    // Add event listeners to handle user interactions\n    box.addEventListener('input', this.onBoxInput.bind(this)); // Handle input event\n    box.addEventListener('keydown', this.onBoxKeyDown.bind(this)); // Handle keydown event\n    box.addEventListener('focus', this.onBoxFocus.bind(this)); // Handle focus event\n    box.addEventListener('paste', this.onBoxPaste.bind(this)); // Handle paste event\n\n    return box;\n  }\n\n  /**\n   * Retrieves the current value of the OTP input field.\n   *\n   * @returns {string} - The concatenated OTP value stored in the `fieldValue`.\n   *\n   * @remarks\n   * This getter returns the internal `fieldValue`, which represents\n   * the OTP as a single string. The `fieldValue` is typically updated\n   * whenever the user inputs values into the OTP input boxes.\n   */\n  get value() {\n    return this.fieldValue;\n  }\n\n  /**\n   * Gets the unique identifier for the OTP field.\n   *\n   * @returns {string} The unique ID of the OTP field in the format `otp-field-{namespace}`.\n   *\n   * @remarks\n   * This getter constructs the ID based on the `namespace` specified in the\n   * configuration, ensuring that each OTP field instance has a unique identifier\n   * that can be used in the DOM for identification and manipulation.\n   */\n  get id(): string {\n    return `otp-field-${this.config.namespace}`;\n  }\n\n  /**\n   * Gets the DOM element associated with the OTP field.\n   *\n   * @returns {HTMLElement} The DOM element of the OTP field.\n   *\n   * @throws {Error} Throws an error if the element cannot be found.\n   *\n   * @remarks\n   * This getter retrieves the DOM element corresponding to the unique ID of the OTP field.\n   * It uses the ID generated from the `id` getter to locate the element in the DOM.\n   * If the element does not exist, an error is thrown to indicate that the OTP field\n   * has not been properly initialized or added to the DOM.\n   */\n  get element(): HTMLElement {\n    const elem = document.getElementById(this.id);\n\n    if (elem === null) {\n      throw new Error(`Element with ID ${this.id} not found in the DOM.`);\n    }\n\n    return elem;\n  }\n\n  /**\n   * Sets focus on the first empty OTP input box.\n   * If all boxes are filled, focus is set to the last box.\n   *\n   * @remarks\n   * The function loops through all input boxes to find the first\n   * empty one, determined by `getBoxValue(i) === ''`.\n   * If it finds an empty box, it focuses on that box.\n   * If all boxes are filled, it focuses on the last box.\n   */\n  focus() {\n    let focusBoxIndex = this.config.boxCount - 1;\n\n    // Loop through each OTP input box\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      // Check if the box is empty\n      if (this.getBoxValue(i) === '') {\n        focusBoxIndex = i; // Set the index to the first empty box\n        break; // Exit the loop after finding the first empty box\n      }\n    }\n\n    this.focusBox(focusBoxIndex);\n  }\n\n  /**\n   * Clears all OTP input boxes and resets the stored field value.\n   *\n   * @remarks\n   * The function loops through all OTP input boxes, setting each one to an empty string.\n   * After clearing all boxes, it resets the `fieldValue` to an empty string\n   * and sets focus on the first input box.\n   */\n  clear() {\n    // Loop through each OTP input box and clear its value\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      this.setBoxValue(i, ''); // Set each box value to an empty string\n    }\n\n    // Clear the internal field value\n    this.fieldValue = '';\n\n    // Focus on the first input box\n    this.focusBox(0);\n  }\n\n  /**\n   * Removes the OTP field element from the DOM.\n   *\n   * @returns {void}\n   *\n   * @remarks\n   * This method is responsible for cleaning up the OTP field by removing its\n   * associated DOM element. This can be useful for managing memory and ensuring\n   * that no references to the element remain after it is no longer needed.\n   *\n   * Note that this method does not perform any additional cleanup for\n   * event listeners or other resources associated with the OTP field.\n   * It is recommended to ensure that any necessary cleanup is performed\n   * before calling this method.\n   */\n  destroy(): void {\n    this.element.remove();\n  }\n\n  /**\n   * Builds the OTP field and appends it to the specified parent element.\n   *\n   * @param {HTMLElement} parentElement - The parent element to which the OTP field will be appended.\n   *\n   * @returns {void}\n   *\n   * @remarks\n   * This method constructs the OTP field using the `skeleton` method and appends\n   * it to the provided `parentElement`. It is responsible for adding the OTP field\n   * to the DOM, making it visible and ready for user interaction.\n   *\n   * Ensure that the `parentElement` is a valid DOM element and is attached\n   * to the document. This method does not perform checks on the parent element's\n   * state or existence.\n   */\n  build(parentElement: HTMLElement) {\n    parentElement.appendChild(this.skeleton());\n  }\n\n  /**\n   * Returns a regular expression to filter OTP input values\n   * based on the configured value type (numeric, alphabetic, or alphanumeric).\n   * If a custom regex is provided in the configuration, that is used instead.\n   *\n   * @returns {RegExp} A regular expression to match the valid characters\n   *                   for the OTP input according to the value type.\n   */\n  private getOtpRegex(): RegExp {\n    // If a custom regex is specified in the config, return that\n    if (this.config.customRegex) {\n      return this.config.customRegex;\n    }\n\n    // Otherwise, return a regex based on the specified or default value type\n    return getOTPRegexForValueType(\n      this.config.valueType ?? OTPValueType.NUMERIC\n    );\n  }\n\n  /**\n   * Applies the OTP validation regex to the given input string and\n   * removes any characters that do not match the valid pattern.\n   *\n   * @param {string} value - The input string to be sanitized according to the OTP type.\n   * @returns {string} - A new string with invalid characters removed.\n   */\n  private applyRegex(value: string) {\n    return value.replace(this.getOtpRegex(), '');\n  }\n\n  /**\n   * Generates a unique ID for an OTP input box based on the provided index.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box.\n   * @returns {string} - A unique ID string for the OTP input box.\n   *\n   * @remarks\n   * This method creates a unique ID by combining the `namespace` from the configuration\n   * with the index of the input box. This ensures that each OTP input box has a\n   * distinct and predictable ID (e.g., 'namespace-box-0', 'namespace-box-1').\n   */\n  private getBoxId(index: number) {\n    return `${this.config.namespace}-box-${index}`;\n  }\n\n  /**\n   * Retrieves the OTP input box at the specified index.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box to retrieve.\n   * @returns {HTMLInputElement} The input box element at the specified index.\n   *\n   * @throws {Error} Throws an error if the box cannot be found at the given index.\n   *\n   * @remarks\n   * This method constructs the box ID using the provided index, queries the DOM\n   * for the input box element, and returns it. If the input box does not exist,\n   * an error is thrown to alert about the invalid index.\n   */\n  private getBoxAtIndex(index: number) {\n    // Get the ID of the input box at the specified index\n    const boxId = this.getBoxId(index);\n\n    // Query the DOM for the input box\n    const box = document.getElementById(boxId);\n\n    // Throw an error if the box is not found\n    if (box === null) {\n      throw new Error(`Unable to get box at index ${index}`);\n    }\n\n    return box as HTMLInputElement;\n  }\n\n  /**\n   * Retrieves the index of a given OTP input box from its `data-index` attribute.\n   *\n   * @private\n   * @param {HTMLInputElement} box - The OTP input box element.\n   * @returns {number} - The index of the input box as an integer.\n   *\n   * @throws {Error} If the `data-index` attribute is missing or cannot be parsed.\n   *\n   * @remarks\n   * This method extracts the index of an OTP input box from its `data-index` attribute.\n   * If the attribute is not found or is invalid, it throws an error.\n   * The index is typically used to identify the position of the input box within the\n   * OTP field (e.g., first box, second box).\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private getBoxIndex(box: HTMLInputElement) {\n    const dataIndex = box.getAttribute('data-index');\n\n    if (dataIndex) {\n      // Convert the `data-index` attribute value to an integer\n      return parseInt(dataIndex, 10);\n    }\n\n    throw new Error('Unable to get `data-index` attribute for box');\n  }\n\n  /**\n   * Updates the overall value of the OTP field by concatenating the values\n   * of all individual input boxes.\n   *\n   * @private\n   *\n   * @remarks\n   * This method iterates through each OTP input box and retrieves its value,\n   * appending each value to a single string. The resulting string represents\n   * the complete OTP entered by the user and is stored in the `fieldValue` property.\n   * This method is typically called after user interactions (like input, paste, etc.)\n   * to ensure the field value accurately reflects the current state of the input boxes.\n   */\n  private updateValue() {\n    // Initialize an empty string to hold the concatenated value\n    let concatenatedValue = '';\n\n    // Concatenate the values from each OTP input box\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      concatenatedValue += this.getBoxValue(i); // Append the value of each box\n    }\n\n    // Update the fieldValue property with the concatenated value\n    this.fieldValue = concatenatedValue;\n  }\n\n  /**\n   * Focuses on the OTP input box at the specified index.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box to focus on.\n   *\n   * @remarks\n   * This method retrieves the input box at the given index and sets the focus to it,\n   * allowing the user to enter their OTP at the specified position in the sequence.\n   */\n  private focusBox(index: number) {\n    // Retrieve the input box at the specified index\n    const box = this.getBoxAtIndex(index);\n\n    // Set focus on the retrieved input box\n    box.focus();\n  }\n\n  /**\n   * Focuses on the next OTP input box in the sequence.\n   *\n   * @private\n   * @param {HTMLInputElement} currentBox - The currently focused OTP input box.\n   *\n   * @remarks\n   * This method checks if there is a next input box in the OTP field configuration.\n   * If a next box exists, it focuses on that box, allowing for seamless input entry.\n   */\n  private focusNextBox(currentBox: HTMLInputElement) {\n    // Get the index of the current box\n    const currentBoxIndex = this.getBoxIndex(currentBox);\n\n    // If the current box index is less than the total number of boxes\n    if (currentBoxIndex + 1 < this.config.boxCount) {\n      this.focusBox(currentBoxIndex + 1); // Focus on the next box\n    }\n  }\n\n  /**\n   * Focuses on the previous OTP input box in the sequence.\n   *\n   * @private\n   * @param {HTMLInputElement} currentBox - The currently focused OTP input box.\n   *\n   * @remarks\n   * This method checks if there is a previous input box in the OTP field configuration.\n   * If a previous box exists, it focuses on that box, enabling users to navigate back in their input.\n   */\n  private focusPrevBox(currentBox: HTMLInputElement) {\n    // Get the index of the current box\n    const currentBoxIndex = this.getBoxIndex(currentBox);\n\n    // If the current box index is greater than or equal to zero\n    if (currentBoxIndex - 1 >= 0) {\n      this.focusBox(currentBoxIndex - 1); // Focus on the previous box\n    }\n  }\n\n  /**\n   * Sets the value of the OTP input box at the specified index.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box to set the value for.\n   * @param {string} value - The value to set for the input box.\n   *\n   * @remarks\n   * This method retrieves the input box at the given index and assigns the specified value to it,\n   * updating the displayed input for the user.\n   */\n  private setBoxValue(index: number, value: string) {\n    // Retrieve the input box at the specified index\n    const box = this.getBoxAtIndex(index);\n\n    // Set the value of the retrieved input box\n    box.value = value;\n  }\n\n  /**\n   * Retrieves the value of the OTP input box at the specified index.\n   *\n   * @private\n   * @param {number} index - The index of the OTP input box to retrieve the value from.\n   * @returns {string} The current value of the input box.\n   *\n   * @remarks\n   * This method fetches the input box at the given index and returns its current value,\n   * allowing for access to the user's input in the OTP field.\n   */\n  private getBoxValue(index: number) {\n    // Retrieve the input box at the specified index\n    const box = this.getBoxAtIndex(index);\n\n    // Return the value of the retrieved input box\n    return box.value;\n  }\n\n  /**\n   * Handles the paste event in an OTP input box.\n   *\n   * @private\n   * @param {ClipboardEvent} e - The paste event triggered when the user pastes text into the input box.\n   *\n   * @remarks\n   * This method processes the pasted text by:\n   * 1. Preventing the default paste behavior.\n   * 2. Applying the defined regex to the pasted text to ensure only valid characters are inserted.\n   * 3. Inserting the processed text across multiple OTP boxes, starting from the currently focused box.\n   *\n   * If the `onPasteBlur` configuration is enabled (or left undefined), the input box is blurred after pasting.\n   * Otherwise, the focus moves to the last box that receives a pasted character. After updating the values,\n   * the overall OTP value is updated.\n   */\n  private onBoxPaste(e: ClipboardEvent) {\n    // Prevent the default paste behavior\n    e.preventDefault();\n\n    // Get the pasted text and apply regex to ensure only valid characters are used\n    const pastedText: string = e.clipboardData!.getData('text');\n    const pastedValue = this.applyRegex(pastedText); // Apply filtering via regex\n\n    // Determine the index of the currently focused input box\n    const currentBoxIndex = this.getBoxIndex(e.target as HTMLInputElement);\n\n    // Calculate the maximum number of boxes the pasted text can fill\n    const maxLength = Math.min(\n      this.config.boxCount - currentBoxIndex, // Remaining boxes from the current one\n      pastedValue.length // Length of the pasted value\n    );\n\n    // Insert the pasted characters into the OTP boxes\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < maxLength; i++) {\n      this.setBoxValue(currentBoxIndex + i, pastedValue[i]);\n    }\n\n    // Determine whether to blur the input box or focus the last one filled\n    if (\n      this.config.onPasteBlur === true ||\n      this.config.onPasteBlur === undefined\n    ) {\n      (e.target as HTMLInputElement).blur(); // Blur the box after pasting\n    } else {\n      this.focusBox(currentBoxIndex + maxLength - 1); // Focus the last filled box\n    }\n\n    // Update the overall OTP value after pasting\n    this.updateValue();\n  }\n\n  /**\n   * Handles the focus event for an OTP input box.\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event triggered when the input box gains focus.\n   *\n   * @remarks\n   * This method is called when an OTP input box is focused. If the current box already\n   * contains a value (i.e., its length is 1), this method selects the existing value.\n   * This allows users to easily overwrite the value if they wish to enter a new character.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private onBoxFocus(e: FocusEvent) {\n    // Check if the current box has a value of length 1\n    if ((e.target as HTMLInputElement).value.length === 1) {\n      // Set the start of the selection to the beginning\n      (e.target as HTMLInputElement).selectionStart = 0;\n\n      // Set the end of the selection to the end of the value\n      (e.target as HTMLInputElement).selectionEnd = 1;\n    }\n  }\n\n  /**\n   * Handles the keydown event for an OTP input box.\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event triggered when a key is pressed while the input box is focused.\n   *\n   * @remarks\n   * This method captures key presses to provide custom navigation and deletion behavior within the OTP input boxes:\n   * - Arrow keys allow the user to navigate between boxes.\n   * - The Backspace key allows moving to the previous box if the current box is empty or the cursor is at the start.\n   * - The Delete key allows moving to the next box if the current box is empty or if the user is trying to delete the only character.\n   */\n  private onBoxKeyDown(e: KeyboardEvent) {\n    // Navigate to the previous box on ArrowLeft or ArrowUp key press\n    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n      e.preventDefault(); // Prevent default behavior\n      this.focusPrevBox(e.target as HTMLInputElement); // Focus the previous box\n    }\n\n    // Navigate to the next box on ArrowRight or ArrowDown key press\n    if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n      e.preventDefault(); // Prevent default behavior\n      this.focusNextBox(e.target as HTMLInputElement); // Focus the next box\n    }\n\n    // Handle Backspace key\n    if (\n      e.key === 'Backspace' &&\n      // If box is empty or selection is at the start\n      ((e.target as HTMLInputElement).value === '' ||\n        (e.target as HTMLInputElement).selectionEnd === 0)\n    ) {\n      this.focusPrevBox(e.target as HTMLInputElement); // Move focus to the previous box\n    }\n\n    // Handle Delete key\n    if (\n      e.key === 'Delete' &&\n      // If box is empty or selection covers the only character\n      ((e.target as HTMLInputElement).value === '' ||\n        ((e.target as HTMLInputElement).selectionStart !== 0 &&\n          (e.target as HTMLInputElement).selectionEnd === 1))\n    ) {\n      this.focusNextBox(e.target as HTMLInputElement); // Move focus to the next box\n    }\n  }\n\n  /**\n   * Handles the input event for an OTP input box.\n   *\n   * @private\n   * @param {InputEvent} e - The input event triggered when the value of the input box changes.\n   *\n   * @remarks\n   * This method is called whenever a user inputs a character into an OTP input box.\n   * It performs the following actions:\n   * - Applies a regex to filter out unwanted characters.\n   * - If the input box is not empty after filtering, it automatically focuses on the next box.\n   * - Updates the overall value of the OTP field to reflect the current state.\n   */\n  private onBoxInput(e: Event) {\n    // Replace unwanted values using the regex\n    const updatedValue = this.applyRegex((e.target as HTMLInputElement).value);\n\n    // Set the input box value to the filtered value\n    (e.target as HTMLInputElement).value = updatedValue;\n\n    // If the current box value is not empty, focus on the next box\n    if ((e.target as HTMLInputElement).value !== '') {\n      // Automatically focus the next input box\n      this.focusNextBox(e.target as HTMLInputElement);\n    }\n\n    // Update the overall OTP value\n    this.updateValue();\n  }\n}\n","import OTPField from './components/field';\n// import Logger from './utils/logger';\n\nwindow.onload = () => {\n  // Logger.instance.setLevel('warn');\n\n  // create otp field instance\n  const otpField = new OTPField({\n    namespace: 'example',\n    boxCount: 3,\n  });\n\n  // TODO: add for to get config and add button to show current value\n\n  // build otp field\n  otpField.build(document.body);\n};\n","import { OTPValueType } from './types';\n\n/**\n *\n * To get otp regex for given value type\n *\n * @param valueType {OTPValueType}\n * @returns {RegExp}\n *\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function getOTPRegexForValueType(valueType: OTPValueType): RegExp {\n  switch (valueType) {\n    case OTPValueType.NUMERIC:\n      return /[^0-9]/g; // Match anything except digits\n\n    case OTPValueType.ALPHABETIC:\n      return /[^A-Za-z]/g; // Match anything except alphabetic characters\n\n    case OTPValueType.ALPHABETIC_LOWER:\n      return /[^a-z]/g; // Match anything except alphabetic lower characters\n\n    case OTPValueType.ALPHABETIC_UPPER:\n      return /[^A-Z]/g; // Match anything except alphabetic upper characters\n\n    case OTPValueType.ALPHANUMERIC:\n      return /[^A-Za-z0-9]/g; // Match anything except alphanumeric characters\n\n    case OTPValueType.ALPHANUMERIC_LOWER:\n      return /[^a-z0-9]/g; // Match anything except alphanumeric lower characters\n\n    case OTPValueType.ALPHANUMERIC_UPPER:\n      return /[^A-Za-z0-9]/g; // Match anything except alphanumeric upper characters\n\n    // throw error for invalid type\n    default:\n      throw new Error('Invalid OTP field value type');\n  }\n}\n","/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-shadow, import/prefer-default-export\nexport enum OTPValueType {\n  // Match anything except digits\n  NUMERIC,\n\n  // Match anything except alphabetic characters\n  ALPHABETIC,\n\n  // Match anything except alphabetic lower characters\n  ALPHABETIC_LOWER,\n\n  // Match anything except alphabetic upper characters\n  ALPHABETIC_UPPER,\n\n  // Match anything except alphanumeric characters\n  ALPHANUMERIC,\n\n  // Match anything except alphanumeric lower characters\n  ALPHANUMERIC_LOWER,\n\n  // Match anything except alphanumeric upper characters\n  ALPHANUMERIC_UPPER,\n}\n"]}