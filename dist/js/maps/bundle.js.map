{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bundle.js","src/ts/components/field.ts","src/ts/components/types.ts","src/ts/main.ts","src/ts/utils/logger.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","__importDefault","mod","__esModule","default","value","logger_1","types_1","OTPField","config","_this","this","instance","TypeError","_classCallCheck","fieldValue","boxCount","setInterval","info","type","OTPValueType","NUMERIC","ALPHABETIC","ALPHABETIC_LOWER","ALPHABETIC_UPPER","ALPHANUMERIC","ALPHANUMERIC_LOWER","ALPHANUMERIC_UPPER","_a","customRegex","getOTPRegexForValueType","valueType","replace","getOtpRegex","focusBoxIndex","getBoxValue","focusBox","setBoxValue","get","field","document","createElement","id","className","appendChild","getBox","index","namespace","box","dataIndex","getAttribute","parseInt","log","getBoxId","maxLength","autocomplete","setAttribute","toString","addEventListener","onBoxInput","bind","onBoxKeyDown","onBoxFocus","onBoxPaste","preventDefault","pastedText","clipboardData","getData","pastedValue","applyRegex","currentBoxIndex","getBoxIndex","Math","min","onPasteBlur","blur","updateValue","selectionStart","selectionEnd","focusPrevBox","focusNextBox","updatedValue","currentBox","getBoxAtIndex","focus","boxId","getElementById","element","remove","parentElement","skeleton","field_1","window","onload","build","body","Logger","logLevels","logLevel","Date","toISOString","level","currentLevelIndex","indexOf","shouldLog","_console","_len","arguments","args","Array","_key","console","apply","getTimestamp","concat","_console2","_len2","_key2","error","_console3","_len3","_key3","warn","_console4","_len4","_key4","undefined","_instance"],"mappings":"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","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"import Logger from '../utils/logger';\nimport { OTPFieldConfig, OTPValueType } from './types';\n\nexport default class OTPField {\n  config: OTPFieldConfig;\n\n  private fieldValue = '';\n\n  get value() {\n    return this.fieldValue;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private getOTPRegexForValueType(type: OTPValueType): RegExp {\n    switch (type) {\n      case OTPValueType.NUMERIC:\n        return /[^0-9]/g; // Match anything except digits\n\n      case OTPValueType.ALPHABETIC:\n        return /[^A-Za-z]/g; // Match anything except alphabetic characters\n\n      case OTPValueType.ALPHABETIC_LOWER:\n        return /[^a-z]/g; // Match anything except alphabetic lower characters\n\n      case OTPValueType.ALPHABETIC_UPPER:\n        return /[^A-Z]/g; // Match anything except alphabetic upper characters\n\n      case OTPValueType.ALPHANUMERIC:\n        return /[^A-Za-z0-9]/g; // Match anything except alphanumeric characters\n\n      case OTPValueType.ALPHANUMERIC_LOWER:\n        return /[^a-z0-9]/g; // Match anything except alphanumeric lower characters\n\n      case OTPValueType.ALPHANUMERIC_UPPER:\n        return /[^A-Za-z0-9]/g; // Match anything except alphanumeric upper characters\n\n      default:\n        throw new Error('Invalid OTP field value type');\n    }\n  }\n\n  getOtpRegex(): RegExp {\n    if (this.config.customRegex) {\n      return this.config.customRegex;\n    }\n\n    return this.getOTPRegexForValueType(\n      this.config.valueType ?? OTPValueType.NUMERIC\n    );\n  }\n\n  applyRegex(value: string) {\n    return value.replace(this.getOtpRegex(), '');\n  }\n\n  focus() {\n    let focusBoxIndex = this.config.boxCount - 1;\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      if (this.getBoxValue(i) === '') {\n        focusBoxIndex = i;\n        break;\n      }\n    }\n\n    this.focusBox(focusBoxIndex);\n  }\n\n  clear() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      this.setBoxValue(i, '');\n    }\n\n    this.fieldValue = '';\n    this.focusBox(0);\n  }\n\n  constructor(config: OTPFieldConfig) {\n    if (config.boxCount <= 0) {\n      throw new Error('Invalid config box count must be grater than zero.');\n    }\n\n    this.config = config;\n\n    setInterval(() => {\n      Logger.instance.info('value =>>> ', this.fieldValue);\n    }, 1000);\n  }\n\n  private skeleton(): HTMLElement {\n    const field = document.createElement('div');\n    field.id = this.id;\n    field.className = 'otp-field';\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      field.appendChild(this.getBox(i));\n    }\n\n    return field;\n  }\n\n  private getBoxId(index: number) {\n    return `${this.config.namespace}-box-${index}`;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private getBoxIndex(box: HTMLInputElement) {\n    const dataIndex = box.getAttribute('data-index');\n    if (dataIndex) {\n      return parseInt(dataIndex, 10);\n    }\n\n    Logger.instance.log('box', box);\n    throw new Error('Unable to get `data-index` attribute for box');\n  }\n\n  private getBox(index: number) {\n    const box = document.createElement('input');\n    box.id = this.getBoxId(index);\n    box.type = 'text';\n    box.maxLength = 1;\n    box.autocomplete = 'off';\n    box.setAttribute('data-index', index.toString());\n\n    box.addEventListener('input', this.onBoxInput.bind(this));\n    box.addEventListener('keydown', this.onBoxKeyDown.bind(this));\n    box.addEventListener('focus', this.onBoxFocus.bind(this));\n    box.addEventListener('paste', this.onBoxPaste.bind(this));\n\n    return box;\n  }\n\n  onBoxPaste(e: any) {\n    e.preventDefault();\n\n    const pastedText: string = e.clipboardData.getData('text');\n    const pastedValue = this.applyRegex(pastedText);\n\n    Logger.instance.log('pasted value', pastedValue);\n\n    const currentBoxIndex = this.getBoxIndex(e.target);\n\n    Logger.instance.log('Current box index', currentBoxIndex);\n\n    const maxLength = Math.min(\n      this.config.boxCount - currentBoxIndex,\n      pastedValue.length\n    );\n\n    Logger.instance.log('maxLength', maxLength);\n\n    for (\n      let i = 0;\n      i < maxLength;\n      // eslint-disable-next-line no-plusplus\n      i++\n    ) {\n      this.setBoxValue(currentBoxIndex + i, pastedValue[i]);\n    }\n\n    Logger.instance.info('config.onPasteBlur', this.config.onPasteBlur);\n    if (this.config.onPasteBlur) {\n      Logger.instance.info('Blur box');\n      e.target.blur();\n    } else {\n      Logger.instance.info('Focus box');\n      this.focusBox(currentBoxIndex + maxLength - 1);\n    }\n\n    this.updateValue();\n  }\n\n  updateValue() {\n    let value = '';\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.config.boxCount; i++) {\n      value += this.getBoxValue(i);\n    }\n\n    Logger.instance.log('value', this.fieldValue, 'new value', value);\n    this.fieldValue = value;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onBoxFocus(e: any) {\n    Logger.instance.info('focus', e);\n\n    // if current box have value select all\n    if (e.target.value.length === 1) {\n      Logger.instance.log(\n        'Select all value for current box, as value of current box not empty',\n        e.target.value\n      );\n      e.target.selectionStart = 0;\n      e.target.selectionEnd = 1;\n    }\n  }\n\n  onBoxKeyDown(e: any) {\n    Logger.instance.log('keydown', e);\n\n    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {\n      Logger.instance.info('Key:ArrowLeft-ArrowUp move focus to prev box');\n      e.preventDefault();\n      this.focusPrevBox(e.target);\n    }\n\n    if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {\n      e.preventDefault();\n      Logger.instance.info('Key:ArrowRight-ArrowUp move focus to next box');\n      this.focusNextBox(e.target);\n    }\n\n    if (\n      e.key === 'Backspace' &&\n      (e.target.value === '' || e.target.selectionEnd === 0)\n    ) {\n      Logger.instance.log('Key:Backspace move focus to prev box');\n      this.focusPrevBox(e.target);\n    }\n\n    if (\n      e.key === 'Delete' &&\n      (e.target.value === '' ||\n        (e.target.selectionStart !== 0 && e.target.selectionEnd === 1))\n    ) {\n      Logger.instance.log('Key:Delete move focus to next box');\n      this.focusNextBox(e.target);\n    }\n  }\n\n  onBoxInput(e: any) {\n    Logger.instance.info('input', e);\n\n    Logger.instance.log('Entered Value', e.target.value);\n\n    // replace unwanted values\n    const updatedValue = this.applyRegex(e.target.value);\n    Logger.instance.log('updatedValue Value', updatedValue);\n\n    e.target.value = updatedValue;\n\n    Logger.instance.log('Value updated', updatedValue);\n\n    // if current box value is empty do nothing\n    if (e.target.value !== '') {\n      Logger.instance.info(\n        'target box value is not empty move focus to next box'\n      );\n      this.focusNextBox(e.target);\n    }\n\n    this.updateValue();\n  }\n\n  focusNextBox(currentBox: HTMLInputElement) {\n    const currentBoxIndex = this.getBoxIndex(currentBox);\n    Logger.instance.info('currentBoxIndex', currentBoxIndex);\n    Logger.instance.log('config boxCount', this.config.boxCount);\n\n    Logger.instance.log(\n      'we need to jump to next box',\n      currentBoxIndex + 1 < this.config.boxCount\n    );\n\n    // if current box index is less than no of box count\n    if (currentBoxIndex + 1 < this.config.boxCount) {\n      Logger.instance.log('Focusing to next box at index', currentBoxIndex + 1);\n      this.focusBox(currentBoxIndex + 1);\n    }\n  }\n\n  focusPrevBox(currentBox: HTMLInputElement) {\n    const currentBoxIndex = this.getBoxIndex(currentBox);\n    Logger.instance.info('currentBoxIndex', currentBoxIndex);\n\n    Logger.instance.log(\n      'we need to jump to prev box',\n      currentBoxIndex - 1 >= 0\n    );\n\n    // if current box index is grater than or equal to zero\n    if (currentBoxIndex - 1 >= 0) {\n      Logger.instance.log('Focusing to next box at index', currentBoxIndex + 1);\n      this.focusBox(currentBoxIndex - 1);\n    }\n  }\n\n  focusBox(index: number) {\n    const box = this.getBoxAtIndex(index);\n    Logger.instance.info('Focusing to Box', box);\n\n    box.focus();\n  }\n\n  private setBoxValue(index: number, value: string) {\n    Logger.instance.log(`Setting box at index ${index} value to ${value}`);\n\n    const box = this.getBoxAtIndex(index);\n    box.value = value;\n  }\n\n  private getBoxValue(index: number) {\n    Logger.instance.log(`Getting box at index ${index} value`);\n\n    const box = this.getBoxAtIndex(index);\n    return box.value;\n  }\n\n  private getBoxAtIndex(index: number) {\n    const boxId = this.getBoxId(index);\n    const box = document.getElementById(boxId);\n\n    if (box === null) {\n      throw new Error(`Unable to get box at index ${index}`);\n    }\n\n    return box as HTMLInputElement;\n  }\n\n  get id(): string {\n    return `otp-field-${this.config.namespace}`;\n  }\n\n  get element(): HTMLElement {\n    return document.getElementById(this.id)!;\n  }\n\n  destroy(): void {\n    this.element.remove();\n  }\n\n  build(parentElement: HTMLElement) {\n    parentElement.appendChild(this.skeleton());\n  }\n}\n","/* eslint-disable no-unused-vars */\n// eslint-disable-next-line no-shadow\nexport enum OTPValueType {\n  // Match anything except digits\n  NUMERIC,\n\n  // Match anything except alphabetic characters\n  ALPHABETIC,\n\n  // Match anything except alphabetic lower characters\n  ALPHABETIC_LOWER,\n\n  // Match anything except alphabetic upper characters\n  ALPHABETIC_UPPER,\n\n  // Match anything except alphanumeric characters\n  ALPHANUMERIC,\n\n  // Match anything except alphanumeric lower characters\n  ALPHANUMERIC_LOWER,\n\n  // Match anything except alphanumeric upper characters\n  ALPHANUMERIC_UPPER,\n}\n\nexport interface OTPFieldConfig {\n  namespace: string;\n\n  boxCount: number;\n\n  onPasteBlur: boolean;\n\n  valueType?: OTPValueType;\n\n  customRegex?: RegExp;\n}\n","import OTPField from './components/field';\n// import Logger from './utils/logger';\n\nwindow.onload = () => {\n  // Logger.instance.setLevel('warn');\n\n  // create otp field instance\n  const otpField = new OTPField({\n    namespace: 'example',\n    boxCount: 6,\n    onPasteBlur: true,\n  });\n\n  // TODO: add for to get config and add button to show current value\n\n  // build otp field\n  otpField.build(document.body);\n};\n","import { LogLevel } from './types';\r\n\r\nexport default class Logger {\r\n  // eslint-disable-next-line no-use-before-define\r\n  private static _instance?: Logger;\r\n\r\n  private logLevels: Array<LogLevel> = ['log', 'info', 'warn', 'error'];\r\n\r\n  private logLevel: LogLevel = 'log';\r\n\r\n  // eslint-disable-next-line no-useless-constructor, no-empty-function\r\n  private constructor() { }\r\n\r\n  setLevel(logLevel: LogLevel) {\r\n    // Set the log level\r\n    this.logLevel = logLevel;\r\n  }\r\n\r\n  static get instance() {\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    if (Logger._instance === undefined) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      Logger._instance = new Logger();\r\n    }\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    return Logger._instance;\r\n  }\r\n\r\n  // Helper method to get the current timestamp\r\n  // eslint-disable-next-line class-methods-use-this\r\n  private getTimestamp(): string {\r\n    const now = new Date();\r\n    return now.toISOString();\r\n  }\r\n\r\n  // Method to check if a message should be logged based on log level\r\n  private shouldLog(level: LogLevel): boolean {\r\n    const currentLevelIndex = this.logLevels.indexOf(this.logLevel);\r\n    const messageLevelIndex = this.logLevels.indexOf(level);\r\n    return messageLevelIndex >= currentLevelIndex;\r\n  }\r\n\r\n  // Main log method that accepts multiple arguments\r\n  public log(...args: unknown[]): void {\r\n    if (this.shouldLog('log')) {\r\n      // eslint-disable-next-line no-console\r\n      console.log(\r\n        '%cLOG:',\r\n        'color: white; background-color: #405d27',\r\n        `[${this.getTimestamp()}]`,\r\n        ...args\r\n      );\r\n    }\r\n  }\r\n\r\n  // Method to log errors\r\n  public error(...args: unknown[]): void {\r\n    if (this.shouldLog('error')) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(\r\n        '%cERROR:',\r\n        'color: white; background-color: #c94c4c',\r\n        `[${this.getTimestamp()}]`,\r\n        ...args\r\n      );\r\n    }\r\n  }\r\n\r\n  // Method to log warnings\r\n  public warn(...args: unknown[]): void {\r\n    if (this.shouldLog('warn')) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\r\n        '%cWARNING:',\r\n        'color: black; background-color: #feb236',\r\n        `[${this.getTimestamp()}]`,\r\n        ...args\r\n      );\r\n    }\r\n  }\r\n\r\n  // Method to log info\r\n  public info(...args: unknown[]): void {\r\n    if (this.shouldLog('info')) {\r\n      // eslint-disable-next-line no-console\r\n      console.info(\r\n        '%cINFO:',\r\n        'color: white; background-color: #4040a1',\r\n        `[${this.getTimestamp()}]`,\r\n        ...args\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}